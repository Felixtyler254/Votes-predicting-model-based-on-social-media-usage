# -*- coding: utf-8 -*-
"""Copy of CAT2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18JjveDGt6w9EfNEqojaE5TrLZAXC7XqO
"""

import pandas as pd
felo= pd.read_csv('/content/SOCIALS .csv')
print("Shape of the social_media:",felo.shape)
felo.head(1000)

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
felo =pd.read_csv('/content/SOCIALS .csv')
x= felo.drop('LIKES', axis =1)
y= felo['VOTE OUTCOME']
X_train, X_test, y_train, y_test = train_test_split(x,y, test_size=0.4, random_state=65)
felo= DecisionTreeClassifier(criterion= 'entropy',random_state=62)
felo.fit(X_train, y_train)

y_prediction= felo.predict(X_test)
print(y_prediction)

accuracy = accuracy_score(y_test,y_prediction)
print ('Accuracy:', accuracy)
print(f"Accuracy: {accuracy:.2f}")
report = classification_report(y_test, y_prediction)
print("Classification report:")
print(report)
conf_matrix= confusion_matrix (y_test,y_prediction)
print ("Confusion Matrix")
print(conf_matrix)

from sklearn import tree
from sklearn.datasets import load_files, load_iris
import matplotlib.pyplot as plt
iris = load_iris()
plt.figure(figsize=(15,10))
vao = tree.DecisionTreeClassifier()
vao.fit(iris.data, iris.target)
tree.plot_tree(felo, filled=True)
plt.show()

import joblib
felo = DecisionTreeClassifier(random_state= 62)
felo.fit(X_train, y_train)
joblib.dump(felo, 'decision_tree_model.pkl')

import joblib
import pandas as pd

loaded_model = joblib.load('/content/decision_tree_model.pkl')

new_data = pd.DataFrame({
    'LIKES': [4882, 2447, 4627, 484, 747, 2632, 4927],
    'AGE': [32, 44, 28, 67, 66, 24, 31],
    'SHARES': [99, 109, 192, 129, 178, 176, 192],
    'COMMENTS': [321, 123, 109, 99, 190, 92, 126],
    'ADDRESS IN P.O BOX': [3432, 4532, 5323, 2442, 5332, 5432, 5643],
    'FOLLOWING': [233, 5567, 6643, 6753, 754, 754, 7456],
    'DONATION TO CANDIDATE 1': [244, 0, 4344, 0, 34, 0, 0],
    'DONATION TO CANDIDATE 2': [0, 2342, 566, 455, 0, 565, 754],
    'FOLOWERS': [233, 454, 554, 643, 89, 0, 343],
    'NO OF POSTS': [23, 434, 43, 553, 65, 754, 0],
    'USER ID': [2333, 5574, 7654, 754, 7743, 7643, 5433],
    'VOTE OUTCOME': [1, 2, 2, 2, 2, 1, 2],
})

X_new_data = new_data.drop('VOTE OUTCOME', axis=1)
vote_outcome_mapping = {1: "VOTED FOR CANDIDATE 1", 2: "VOTED FOR CANDIDATE 2"}

for i, prediction in enumerate(predictions):
    label = vote_outcome_mapping[prediction]
    print(f"Data {i + 1}: predicted Outcome = {label}")